# .github/workflows/cicd.yml
name: CI/CD

# Run workflow on push
on: 
  push:
    branches: [ main, redev ]  # Only run on main and develop branches for pushes
  pull_request:
    branches: [ main ]

# note that some of these keys are informational only
jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    # Test on multiple operating systems for better compatibility assurance
    runs-on: ${{ matrix.os }}
    
    strategy:
      # Don't cancel all jobs if one fails - collect all failures
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.13"]
        os: [ubuntu-latest,] # macos-latest,]  # windows-latest,

    steps:
      # check out repos
      - name: Check out repo
        uses: actions/checkout@v4
      
      # Set up Python environment with specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # cache pip dependencies to speed up workflow
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash  # ensure consistent shell across all OS

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run Tests
        run: |
          python manage.py test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
